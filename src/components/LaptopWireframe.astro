---
// Terminal component with CV JSON and subtle shadow
---

<!-- Contenedor del laptop -->
<div
  class="relative lg:absolute right-8 top-1/2 -translate-y-1/2 hidden lg:block
         [transform-style:preserve-3d] perspective-500 transition
         hover:scale-[1.02] hover:saturate-150 ease-out duration-300
         shadow-lg shadow-accent/10 hover:shadow-xl hover:shadow-accent/15">

  <!-- Carcasa + pantalla -->
  <div
    class="w-[520px] h-[347px] bg-surface border border-accent/20 rounded-xl
           rotateX-6 rotateY-8 shadow-[0_25px_60px_-10px_rgba(127,90,240,0.3)]
           overflow-hidden relative">

    <!-- Brillo/reflejo -->
    <span
      class="absolute inset-0 bg-gradient-to-br from-accent/10 via-transparent to-transparent
             pointer-events-none"></span>

    <!-- Terminal -->
    <div class="p-4 h-full font-mono text-sm leading-relaxed text-primary-text overflow-hidden bg-background">
      <!-- Header de la terminal -->
      <div class="flex items-center justify-between mb-3 pb-2 border-b border-accent/20">
        <div class="flex items-center space-x-2">
          <div class="w-3 h-3 bg-error rounded-full"></div>
          <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div class="w-3 h-3 bg-success rounded-full"></div>
        </div>
        <span class="text-secondary-text text-xs font-medium">terminal</span>
      </div>
      
      <!-- Contenido de la terminal -->
      <div id="terminal-content" class="space-y-2 text-xs">
        <!-- El contenido se agregará dinámicamente -->
      </div>
      
      <!-- Prompt actual -->
      <div class="flex items-center mt-3">
        <span class="text-success mr-2 font-bold">$</span>
        <span id="current-command" class="text-primary-text"></span>
        <span id="typing-cursor" class="inline-block w-2 h-4 bg-success ml-1"></span>
      </div>
    </div>
  </div>

</div>

<script>
  // Cargar anime.js dinámicamente
  let anime: any = null;
  
  // Función para cargar anime.js
  async function loadAnimeJS() {
    try {
      const animeModule = await import('animejs');
      anime = animeModule;
    } catch (error) {
      console.warn('Could not load anime.js:', error);
      anime = null;
    }
  }
  
  interface TerminalCommand {
    command: string;
    output?: string;
    delay: number;
  }

  // Comandos de la terminal que muestran información de las secciones
  const terminalCommands: TerminalCommand[] = [
    // Navegación inicial
    { 
      command: "cd ~/portfolio", 
      output: "", 
      delay: 1000 
    },
    
    // Navegación a habilidades
    { 
      command: "cd skills", 
      output: "", 
      delay: 1000 
    },
    
    // Listar categorías de habilidades
    { 
      command: "ls", 
      output: `frontend/
backend/
databases/
devops/`, 
      delay: 3000 
    },
    
    // Frontend skills
    { 
      command: "cd frontend && ls", 
      output: `react.md
angular.md
typescript.md
javascript.md
html-css.md`, 
      delay: 3000 
    },
    
    { 
      command: "cat frontend-overview.md", 
      output: `# Frontend Development

**Experiencia:** 5+ años desarrollando interfaces modernas y responsivas.

**Logros Destacados:**
✅ Mejora del 30% en la interacción de usuarios
✅ Optimización de Core Web Vitals (3s → 2.1s)
✅ Implementación de UI/UX con React y Angular
✅ Desarrollo de interfaces accesibles y responsivas

**Tecnologías:** React, Angular, TypeScript, JavaScript, HTML/CSS`, 
      delay: 5000 
    },
    
    // Backend skills
    { 
      command: "cd ../backend && ls", 
      output: `nodejs.md
python.md
dotnet.md
php.md`, 
      delay: 3000 
    },
    
    { 
      command: "cat backend-overview.md", 
      output: `# Backend Development

**Experiencia:** 5+ años construyendo APIs y microservicios escalables.

**Logros Destacados:**
✅ Desarrollo de microservicios con Python y FastAPI
✅ Reducción del 20% en tiempos de procesamiento
✅ Integración de APIs (Google Analytics, Meta Ads, TikTok)
✅ Optimización de arquitecturas escalables

**Tecnologías:** Node.js, Python (FastAPI), C# & .NET Core, PHP (Laravel)`, 
      delay: 5000 
    },
    
    // Databases
    { 
      command: "cd ../databases && ls", 
      output: `mysql.md
postgresql.md
sqlserver.md
redshift.md`, 
      delay: 3000 
    },
    
    { 
      command: "cat databases-overview.md", 
      output: `# Database Management

**Experiencia:** 5+ años optimizando y administrando bases de datos.

**Logros Destacados:**
✅ Reducción del 83% en tiempos de consulta SQL Server
✅ Optimización de stored procedures y queries
✅ Migración de datos a Redshift para analítica
✅ Estructuración de modelos de datos escalables

**Tecnologías:** MySQL, PostgreSQL, SQL Server, Redshift`, 
      delay: 5000 
    },
    
    // DevOps
    { 
      command: "cd ../devops && ls", 
      output: `docker.md
aws.md
microservices.md
apis.md
karma.md`, 
      delay: 3000 
    },
    
    { 
      command: "cat devops-overview.md", 
      output: `# DevOps & Testing

**Experiencia:** 3+ años implementando CI/CD y automatización.

**Logros Destacados:**
✅ Automatización de procesos con HubSpot y CleverTap
✅ Despliegue seguro y rápido de nuevas funcionalidades
✅ Implementación de pruebas unitarias con Karma
✅ Optimización de microservicios y contenedores

**Tecnologías:** Docker, AWS & Azure, Microservicios, APIs REST, Karma`, 
      delay: 5000 
    },
    
    // Volver al directorio raíz
    { 
      command: "cd ~/portfolio", 
      output: "", 
      delay: 1000 
    },
    
    // Información de contacto
    { 
      command: "cat contact.md", 
      output: `# Contact Information

**Email:** erickandres30@gmail.com
**GitHub:** github.com/Galaoox
**LinkedIn:** linkedin.com/in/erick-avn

**Disponible para:**
• Proyectos freelance
• Oportunidades full-time
• Colaboraciones técnicas
• Consultoría en desarrollo`, 
      delay: 10000 
    }
  ];

  let currentCommandIndex = 0;
  let currentCharIndex = 0;
  let isTypingCommand = true;

  // Función para crear elemento de línea
  function createLine(content: string, type: 'command' | 'output' | 'prompt' = 'command') {
    const line = document.createElement('div');
    line.className = 'flex items-start';
    
    if (type === 'command') {
      line.innerHTML = `<span class="text-success mr-2 font-bold">$</span><span class="text-primary-text">${content}</span>`;
    } else if (type === 'output') {
      // Para el JSON, mantener el formato
      if (content.includes('{') || content.includes('[')) {
        line.innerHTML = `<span class="text-secondary-text whitespace-pre font-mono">${content}</span>`;
      } else {
        // Para contenido con saltos de línea, procesar cada línea
        const lines = content.split('\n');
        if (lines.length > 1) {
          // Crear múltiples líneas para el output
          const outputContainer = document.createElement('div');
          outputContainer.className = 'w-full';
          
          lines.forEach((lineText, index) => {
            const lineSpan = document.createElement('div');
            lineSpan.className = 'text-secondary-text whitespace-pre font-mono';
            lineSpan.textContent = lineText;
            outputContainer.appendChild(lineSpan);
          });
          
          return outputContainer;
        } else {
          line.innerHTML = `<span class="text-secondary-text">${content}</span>`;
        }
      }
    } else {
      line.innerHTML = `<span class="text-success mr-2 font-bold">$</span><span class="text-primary-text">${content}</span>`;
    }
    
    return line;
  }

  // Función para escribir progresivamente
  function typeProgressive() {
    const terminalContent = document.getElementById('terminal-content');
    const currentCommand = document.getElementById('current-command');
    const cursor = document.getElementById('typing-cursor');
    
    if (!terminalContent || !currentCommand || !cursor) return;

    if (currentCommandIndex >= terminalCommands.length) {
      // Reiniciar cuando termine
      setTimeout(() => {
        terminalContent.innerHTML = '';
        currentCommandIndex = 0;
        currentCharIndex = 0;
        isTypingCommand = true;
        typeProgressive();
      }, 2000);
      return;
    }

    const currentCmd = terminalCommands[currentCommandIndex];

    if (isTypingCommand) {
      // Escribiendo el comando
      if (currentCharIndex < currentCmd.command.length) {
        currentCommand.textContent = currentCmd.command.substring(0, currentCharIndex + 1);
        currentCharIndex++;
        setTimeout(typeProgressive, 50 + Math.random() * 30);
      } else {
        // Comando completado, mostrar output
        isTypingCommand = false;
        currentCharIndex = 0;
        
        // Agregar línea del comando completado
        const commandLine = createLine(currentCmd.command, 'command');
        terminalContent.appendChild(commandLine);
        currentCommand.textContent = '';
        
        // Mostrar output si existe
        if (currentCmd.output) {
          setTimeout(() => {
            const outputLine = createLine(currentCmd.output!, 'output');
            terminalContent.appendChild(outputLine);
            
            // Pasar al siguiente comando
            setTimeout(() => {
              // Ejecutar clear automáticamente después de todos los comandos excepto los de navegación inicial
              if (!currentCmd.command.startsWith('cd ~/portfolio') && 
                  !currentCmd.command.startsWith('cd skills')) {
                clearTerminal();
              }
              
              currentCommandIndex++;
              isTypingCommand = true;
              currentCharIndex = 0;
              typeProgressive();
            }, currentCmd.delay);
          }, 200);
        } else {
          // Para comandos como 'cd' sin output
          setTimeout(() => {
            currentCommandIndex++;
            isTypingCommand = true;
            currentCharIndex = 0;
            typeProgressive();
          }, currentCmd.delay);
        }
      }
    }
  }

  // Función para limpiar la terminal
  function clearTerminal() {
    const terminalContent = document.getElementById('terminal-content');
    if (terminalContent) {
      terminalContent.innerHTML = '';
    }
  }

  // Animación del cursor con manejo de errores
  function animateCursor() {
    const cursor = document.getElementById('typing-cursor');
    if (!cursor) return;
    
    if (!anime) {
      // Fallback: animación CSS simple si anime.js no está disponible
      cursor.classList.add('animate-pulse');
      return;
    }
    
    try {
      anime({
        targets: cursor,
        opacity: [0, 1, 0],
        duration: 900,
        loop: true,
        easing: 'steps(2)'
      });
    } catch (error) {
      console.warn('Error animating cursor with anime.js, using CSS fallback:', error);
      cursor.classList.add('animate-pulse');
    }
  }

  // Iniciar animaciones
  document.addEventListener('DOMContentLoaded', async () => {
    await loadAnimeJS();
    animateCursor();
    setTimeout(typeProgressive, 1000);
  });
</script>
